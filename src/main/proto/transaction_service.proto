syntax = "proto3";

package com.transactionMicroservice.grpc;

option java_multiple_files = true;
option java_package = "com.transactionMicroservice.grpc";
option java_outer_classname = "TransactionServiceProto";

service TransactionService {
  // Process an internal transfer between accounts
  rpc InternalTransfer(TransactionRequest) returns (TransactionResponse) {}
  
  // Process a deposit to an account
  rpc ProcessDeposit(TransactionRequest) returns (TransactionResponse) {}
  
  // Get transaction details by transaction reference
  rpc GetTransactionByReference(TransactionReferenceRequest) returns (TransactionResponse) {}
  
  // Get all transactions for an account
  rpc GetTransactionsByAccountId(AccountTransactionsRequest) returns (TransactionsListResponse) {}
}

// Request message for transaction operations
message TransactionRequest {
  string from_account = 1;
  string to_account = 2;
  string amount = 3;
  string currency_type = 4;
  TransactionType transaction_type = 5;
  string description = 6;
  string metadata = 7;
}

// Response message for transaction operations
message TransactionResponse {
  string transaction_reference = 1;
  string from_account = 2;
  string to_account = 3;
  string amount = 4;
  string currency_type = 5;
  TransactionType transaction_type = 6;
  TransactionStatus transaction_status = 7;
  string fee_amount = 8;
  string fee_currency = 9;
  string timestamp = 10;
  string description = 11;
  string metadata = 12;
}

// Request to get a transaction by reference
message TransactionReferenceRequest {
  string transaction_reference = 1;
}

// Request to get all transactions for an account
message AccountTransactionsRequest {
  string account_id = 1;
  int32 page = 2;
  int32 size = 3;
  string sort_by = 4;
  bool ascending = 5;
}

// Response for multiple transactions
message TransactionsListResponse {
  repeated TransactionResponse transactions = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 size = 4;
}

// Transaction types
enum TransactionType {
  TRANSFER = 0;
  DEPOSIT = 1;
  WITHDRAWAL = 2;
  PAYMENT = 3;
  FEE = 4;
  INTEREST = 5;
}

// Transaction statuses
enum TransactionStatus {
  PENDING = 0;
  COMPLETED = 1;
  FAILED = 2;
  REVERSED = 3;
  CANCELLED = 4;
}

// Currency Types
enum CurrencyType {
  USD = 0;
  EUR = 1;
  GBP = 2;
  KES = 3;
}

message InsufficientFundsError {
  string account_number = 1;
  string current_balance = 2;
  string requested_amount = 3;
  string currency = 4;
}

message IneligibleAccountException {
  string account_number = 1;
  string attempted_Operation = 2;
}